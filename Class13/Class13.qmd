---
title: "Class13: Transcriptomics and the analysis of RNA-Seq data"
author: "Yi-Hung Lee (A16587141)"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects

## Import data

Load library DESeq2
```{r}
library(BiocManager)
library(DESeq2)
```

Load data
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```
```{r}
head(metadata)
```

> Q1. How many genes are in this dataset?

There are `r nrow(counts)` genes in this dataset

> Q2. How many ‘control’ cell lines do we have?

There are `r nrow(subset(metadata, dex== 'control'))` control cell lines

```{r}
sum(metadata$dex == 'control')
```

## Check on match of the dataset

```{r}
colnames(counts)
metadata$id

colnames(counts) == metadata$id

## Data matched

## See if they are all true

all(colnames(counts) == metadata$id)
```

## Analysis
Wanna start comparing 'control' to 'treated' columns. To do this I will find the mean of the 'control' column.

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[, "dex"] == 'treated', ]
treated.count <- counts[, treated$id]
treated.mean <- apply(treated.count, 1, mean)
head(treated.mean)
```


```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```
> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1], meancounts[, 2], xlab = "Control", ylab = 'Treated')
```


> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

```{r}
library(ggplot2)

ggplot(meancounts, aes(meancounts[,1], meancounts[, 2])) + 
  geom_point() +
  xlab("Control.mean") +
  ylab('Treated.mean')
```
> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts[,1], meancounts[, 2], log = 'xy', xlab = "Control", ylab = 'Treated')
```

```{r}
ggplot(meancounts, aes(meancounts[,1], meancounts[, 2])) + 
  geom_point() +
  xlab("Control.mean") +
  ylab('Treated.mean') +
  scale_x_continuous(trans="log2") +
  scale_y_continuous(trans="log2")
```

```{r}
meancounts$log2fc <- log2(meancounts[,'treated.mean']/meancounts[, 'control.mean'])
head(meancounts)
```

Remove the datasets that includes 'NaN' or '-Inf'
```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind=TRUE argument will clause which() to return both the row and column indices (i.e. positions) where there are TRUE values. 


```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind == TRUE)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind == TRUE)
```

> Q10. Do you trust these results? Why or why not?

No because we haven't check if the number is statistically significant yet

## Setting up for DESeq

```{r}
library(DESeq2)
citation("DESeq2")
```

Import Data

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~dex)

dds
```

## Principal Component Analysis (PCA)

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```
Use ggplot to plot PCA
```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData, aes(PC1, PC2, color = dex)) + 
  geom_point(size = 3) + 
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

## DESeq analysis

```{r}
dds <- DESeq(dds)
```
```{r}
res <- results(dds)
res
```
```{r}
summary(res)
```

Set cutoff to 0.05

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.05), col="gray", lty=2)
```
```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.05) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"


plot( res$log2FoldChange, -log(res$padj), 
      col = mycols,
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.05), col="gray", lty=2)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")

head(res)
```

